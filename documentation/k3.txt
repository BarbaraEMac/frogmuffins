												becmacdo	Barbara Macdonald
												dgoc 		Daniel Goc

 	     __  __                                ___          __     
		/\ \/\ \                              /\_ \       /'__`\   
		\ \ \/'/'     __   _ __    ___      __\//\ \     /\_\L\ \  
		 \ \ , <    /'__`\/\`'__\/' _ `\  /'__`\\ \ \    \/_/_\_<_ 
		  \ \ \\`\ /\  __/\ \ \/ /\ \/\ \/\  __/ \_\ \_    /\ \L\ \
		   \ \_\ \_\ \____\\ \_\ \ \_\ \_\ \____\/\____\   \ \____/
		    \/_/\/_/\/____/ \/_/  \/_/\/_/\/____/\/____/    \/___/ 

Question 1
==========
	The executable is located at: /u8/becmacdonald/cs452/a3/handin/main/main.elf.

	To make the kernel, execute the following from the root directory:
	cd src/
	make clean && make all && make copy
	cd ..
	make clean && make all
	cp main/main.elf /u/cs452/tftpboot/ARM/becmacdo_a3.elf

	To load the program, type 'load ARM/becmacdo_a3.elf' at the command prompt.

	Finally, to operate the program, type 'go' at the RedBoot command prompt.

Question 2 
==========
	
	Weaknesses in Previous Kernel That We Fixed
	===========================================
	We fixed our context switch to handle hardwares interrupts and made some small
	changes to our TD. Overall, our kernel seems to be robust and able to handle
	all of the new modifications. We have many assert and debug statements 
	throughout the code that immediately notify us when a module breaks.


	TD and TD Manager
	=================
	We made a few changes to our task descriptor (TD) struct and manager (TDM).
	We added a new TD state AWAITING_EVT to indicate that a task is blocked and
	waiting for a particular event. Tasks with this state will not be put on a 
	ready queue or scheduled to be active until the event has occurred.

	We also changed the name of our task descriptor manager. It used to be
	called PQ since it just held priority queue operations for the ready queue.
	Now that it has device drive information, the ready queues and the 
	await event queues, we've changed the name to TDM (which stands for TD Manager).


	Context Switch
	==============
	The context switch was slightly changed from the one used in K1 and K2 to
	make sure we aren't overwriting scratch register. Here is how it works now:
	 1) switch to system mode
	 2) save active task's state {r0-r12, lr, pc}
		NOTE: pc is useless and will be overwritten shortly
	 3) temporarily store the user's sp
	 4) switch to back supervisor mode
	 5) store the actual pc we want to store (on the user stack)
	 6) restore the kernel's registers holding the address of TD and Request
	 7) put the sp, and read and put the spsr into the active task
	 8) get the request type
	 9) read the immediate value of swi
	10) fill the request with the arguments
	11) restore the rest of kernel's registers & jump back to the kernel
		(this returns to where kernelExit would return if it was a normal function)

	The Kernel exit routine was appropriately modified to be:
	 1) store the kernel state
	 2) fetch the active tasks's sp and spsr
	 3) read the address to return to (the active tasks's pc)
	 4) install the spsr in supervisor's spsr
	 5) put the return value in r0
	 6) switch to system mode
	 9) restore the active task {r1-r12, lr} NOTE: r0 is skipped 
	10) we didn't read the pc, so add to the sp
	11) switch to supervisor mode
	12) install the pc of the active task

	Interrupt Handling
	==================
	Modifying the context switch as described above let us write an interrupt 
	context switch that is very similar to the regular context switch:
	 1) switch to system mode
	 2) save active task's state {r0-r12, lr, pc}
		NOTE: pc is useless and will be overwritten shortly
	 3) temporarily store the user's sp
	 4) switch back to interrupt mode
	 5) store the actual pc we want to store (on the user stack) // this is pc-4
	 6) get the spsr
	 7) switch to supervisor mode
	 8) restore the kernel's registers holding the address of TD and Request
	 9) put the sp, and spsr into the active task
	10) fill the request with the arguments (request type = HARDWAREINT)bm
	11) restore the rest of kernel's registers & jump back to the kernel
		(this returns to where kernelExit would return if it was a normal function)

	Once kernel resumes execution after the interrupt context switch, it proceeds
	as normally to check the request type, which will be marked as HARDWAREINT.
	To handle the interrupt we do the folowing
	 1) Get an index of the actual interrupt
	 2) Get the driver for the interrupt that happened (This is saved in the TDM)
	 3) Pass the event to the task waiting for it (if there is one)
	 4) Turn off interrupts as there is no-one to handle them
	The notifier tasks by convention are some of the highest priority tasks
	and so get to run within a short anmount of time after the interrupt.

	Device Drivers
	==============
	Before a task can wait on an interrupt, it must install a driver so that
	the kernel knows how to handle the interrupt. We did this so that the kernel
	would be portable and doesn't need to know about how to directly talk to the
	hardware.

	The drivers must turn off the interrupt and proceed to read and pass the data 
	and clearing buffers, etc. Basically, the driver will handle the interrupt
	once it has been triggered. The driver runs in kernel mode, and in a real-world
	application it would have to be certified before we would allow it to do so.
	Also, the MMU would be set up to limit the driver's 'reach'.
	
	One driver should be written per interrupt type. For this assignment, we are 
	only using the timers, so only a timer1Driver and timer2Driver were implemented.
	In future assignments, it will be very easy to implement other drivers. 
	Here is the pseudo code for the timer 1 and 2 drivers:
		Clear the timer interrupt.
		Return an empty buffer and NO_ERROR.
	
	A user task that will eventually call AwaitEvent() must first call 
	InstallDriver(). (Unless another tasks has already done so.)
	This is another system call that we have implemented. The
	function takes an interrupt type and a pointer to the corresponding driver
	function. This function is stored in the TD mananger in an array indexed by 
	the interrupt type it handles. The TD manager has 1 entry for every interrupt
	type (0->31).

	Another approach of the driver approach is being able to run the driver 
	directly using the vectored fast interrupts available in the ARM architecture
	if we wish to do so in the future.

	Await Event
	===========
	AwaitEvent() can be called by a user task to block the task until a particular 
	event has occurred. Since this is a system call, the handler for AwaitEvent()
	calls swi with the corresponding code (9) for this type of system call as a 
	single argument.
	
	Here is the pseudo code for kernel code of awaitEvent():
	 1)	Ensure that the arguments are correct.
	 2)		Event Id is valid.
	 3)		The driver for this event id has been installed.
	 4)	Turn on the interrupt for this particular event.
	 5)	Change the state of the active task to AWAITING_EVT.
	 6)	Push the task on the interrupt blocked queues.
	 7)	Signal no error.

	For this kernel, user tasks can only wait on TIMER1 or TIMER2. This will cause
	the task to wait until a timer interrupt has occurred. 

	The interrupt blocked queues are stored as a single array of queues within the 
	TD Manager. The interrupt type (0 -> 31) is used as an index into the array 
	pointing to the head of each FIFO queue. If no task has called AwaitEvent() for
	an interrupt type, that queue has a null (0) value. We recognize that we will
	probably not turn on all 32 interrupt types and there may be some wastedspace
	here. However, we designed our kernel to be as flexible as possible with as 
	little rewriting of code in the future.
	

	Clock Server
	============
	The clock server is a user task that keeps track of the current time since 
	the kernel was started. It operates much like the name server and rock,
	paper, scissors server. Here is the pseudo code:

		Initialize the server by:
			Registering with the Name Server.
			Creating a helper Notifer task.
			Clearing the buffer of sleeping user tasks.

		FOREVER {
			Receive a query from another user task.

			If the query was Delay (ticks),
				Put the user task to sleep for at least ticks amount of time.
			If the query was DelayUntil (ticks),
				Put the user task to sleep until the current time is ticks.
			If the query was Time(),
				Return the current time to the user task.
			If the query was Notify(),
				Record the current time.
				Wake up any user tasks that should be woken up by Reply().
			If you received another query,
				Error!
		}

	The ClockServer mainly consists of a single queue of Sleeper structs,
	where Sleeper is of the form:
		TID tid;
		int endTime;

		Sleeper *nextSleepingUserTask;
		Sleeper *previousSleepingUserTask;

	This queue is a circular, doubly-linked list. 

	Delay
	=====
	Delay() is a wrapper for send to the Clockserver and can be called by a user 
	task to cause it to wait for a given amount	of ticks. Here is the pseudocode:

		Grab an unused sleeper struct.
		Store the tid in the sleeper struct.
		Compute the end time by adding the current time to the ticks.
		Store the endTime in the sleeper struct.
		Insert the sleeper struct into the queue of sleepers in sorted order. 

	Note that the insert places the new sleeper in the queue in sorted order.
	It is not a FIFO queue! The sleepers are organized by endTime with the soonest
	end time closest as the head of the queue.

	DelayUntil
	==========
	DelayUntil() can be called by a user task to delay until the given end time.
	It is a wrapper for a Send() to the ClockServer that does the following:

		Grab an unused sleeper struct.
		Store the tid in the sleeper struct.
		Store the endTime in the sleeper struct.
		Insert the sleeper struct into the queue of sleepers in sorted order. 
	
	DelayUntil() and Delay() are very similar in functionality.

	Time
	====
	A user task can query the clock server for the current time by calling Time().
	This function will return the current time in ticks since the clock server
	started. To convert the raw CPU ticks to 50ms ticks, we grab the current time
	from a timer that is running at 2000Hz and divide it by 100.
	It is also implemented as a wrapper for Send() to the ClockServer.
	
	Clock Notifier
	==============
	When the ClockServer initializes, it spawns a working task called the Notifier.
	The ClockServer operates by calling Receive() and blocking until it is passed a 
	message from either another user task or the notifier. Since the ClockServer
	needs to keep track of the current time, we need to make sure it doesn't block
	for more than 1 tick. Hence, we see the need to have a notifier task.

	It is the notifier that listens for the TIMER1 interrupts and acts 
	accordingly. Here is the pseudo code for the notifier:
		Initialize the hardware and notifier.
		FOREVER {
			AwaitEvent ( Timer Interrupt );
			Check for errors during await.
			Send a message to the ClockServer to wake it up.
			Check for send errors.
		}

	Every 50 ms, a hardware interrupt is triggered from TIMER1. The notifier is 
	asleep waiting for this interrupt to occur. When it does, the notifier is 
	woken up and sends a message to the ClockServer to wake it up if is blocked 
	on Receive(). The notifier then awaits the next hardware interrupt.

	Right now, the notifier is specific to helping the ClockServer. It will be
	made more generic for future kernel assignments so that any task can spawn
	a notifier task.

	The priority of a notifier task is sufficiently important. It must be able to
	catch an interrupt as soon as it occurs and handle it appropriately. Hence,
	the notifier is made at priority 1, making it the second highest priority task
	behind the first user task for Kernel 3. Once this first task exits, the
	notifier has the highest priority and will always run if an interrupt has
	occurred. The Name and Clock servers are created with priority 2.


	Shell
	=====
	We decided to reuse code from assignment 0 to implement a shell/command prompt
	for this assignment. This shell lets us easily run the k1, k2, and k3 user
	tasks from the command line. When we are changing the context switch code,
	it is extremely useful to re-run the first kernel assignments to ensure they
	are still running.

	The shell is technically the first user task and can be used to initialize 
	servers and the state of the kernel. It is created with the lowest priority 
	possible and will only run when there are no higher priority tasks on the 
	ready queues.

	Type 'h' at the command prompt to get a list of valid commands. Nothing happens
	for invalid commands. 


	User Tasks for Kernel 3
	==========================
	Since the assignment only asked for a description of the changes to the
	kernel, we will not include a description of the user tasks. The
	code is heavily documented and easy to read, if needed. Or, we will be happy
	to provide written details, if required.

Question 3
==========
	All source code is located in: /u8/becmacdonald/cs452/a3/handin.

	Here are the md5 hashes for each file:

	1bbdde0f9272ce27b26219b36a56b28e  ./arch/switch.S
	8a714a74e007435dfb4fdc1499cefdf6  ./arch/switch.c

	0995484f9e2710b57b3cc58924953e51  ./documentation/k2.out
	52964ac97d4144df7768e6d5f4dba159  ./documentation/syscall.txt
	fe969235a8cc5bac3991570200e58ae1  ./documentation/k1.txt
	c12e6a30a6f74cfe0ed6e0d7b42c9d28  ./documentation/k2.txt
	e661fa70dcc47cc6cae2ee8571cf1f19  ./documentation/k3.txt

	4dec653ff77c6c60245b50034e1cd2a8  ./driver/drivers.c

	b47ec772c9587d700caaf495ebc0cdd6  ./include/math.h
	8b8513f4d8acfc7c286791873724de02  ./include/error.h
	8edbd0d3c6f3b9a913ed70ba64b93929  ./include/clock.h
	8cbe0128c7a89ad94a7d5542a758d743  ./include/syscalls.h
	79420f3c0b2224c9731b40c7e2882138  ./include/ts7200.h
	284f5809b261c65bf4298f5707c6890e  ./include/bwio.h
	1f636a0caf7a3b085550e06e9bf4f204  ./include/gameserver.h
	7362b29957ddfbbb258d656689368acd  ./include/switch.h
	145507954bf66a4cc19fe0753a820940  ./include/task.h
	f12dba7c03ed2d309d83f0c603bdf00a  ./include/string.h
	20779ceb04fffabc5d97ba646d30bcf5  ./include/shell.h
	3e1dc5f50f86a983d38c232fa247bac4  ./include/td.h
	aa9eeaa5e108edefedbdfc9610abcea6  ./include/nameserver.h
	2646bd05f7a8791a4799f7ecc05cfb83  ./include/requests.h
	845aa0a01f752a1fb41cf2766293e48b  ./include/drivers.h
	2b98d4e1e0bd5603872c6139dbac0874  ./include/clockserver.h
	4cdafbed0b30d282fa12007097533e5a  ./include/globals.h
	ccf98888e8b4b6ad9b9cb429697942f4  ./include/gameplayer.h
	49d6b686a32e30509085d69fade0562d  ./include/debug.h

	a70af2931fa4a98a497be405d27b8641  ./main/main.c
	9ec86426ab6e6cb316ed575b049bea0c  ./main/td.c
	5ef12d7238e4be4ffe0bfcd1d4419e63  ./main/orex.ld
	6daab6fcb9f20a5abf535f1a087f7a98  ./main/syscalls.c

	2f0b2ebc09094503ec50a74229f98a6d  ./Makefile

	a4741f6aa92cc98a01c18cc3414a0107  ./server/clockserver.c
	b35e3488258bd1e32debc848c4aa6280  ./server/nameserver.c

	307f9f9d74c14f53c14e1bb805d18964  ./src/bwio.c
	408c442d786f9436b969b27b5d934cd7  ./src/debug.c
	97a527897e5be8082b52809db93aa68e  ./src/string.c
	f75fdbf20b0775f6572773da7b216a50  ./src/math.c
	9b56cb4928b99c9d2cdb435f0f0f66c0  ./src/clock.c
	1e207d4c06aadc16e7ca20b25f540924  ./src/Makefile

	2a680012f3698e3f29e0571a0926a49e  ./task/gameserver.c
	0620c3a4f1ba615a24f32ae60f781684  ./task/task.c
	67176ab15a6023cb97879874dcb0c3b3  ./task/gameplayer.c
	18952f38ccb0a1e6026e880ce9f58a85  ./task/shell.c
	9f457ee9157b6c11499cc9242fcafc48  ./task/requests.c

Question 4
==========
	Here is a listing of all submitted files:
	
	.:
	arch           driver   lib   Makefile  src      task
	documentation  include  main  server    syscall

	./arch:
	switch.c  switch.S

	./documentation:
	k1.txt  k2.out  k2.txt  k3.txt  syscall.txt

	./driver:
	drivers.c

	./include:
	bwio.h         drivers.h     globals.h     shell.h     task.h
	clock.h        error.h       math.h        string.h    td.h
	clockserver.h  gameplayer.h  nameserver.h  switch.h    ts7200.h
	debug.h        gameserver.h  requests.h    syscalls.h

	./lib:
	libbwio.a  libclock.a  libdebug.a  libmath.a  libstring.a

	./main:
	main.c  orex.ld  syscalls.c  td.c

	./server:
	clockserver.c  nameserver.c

	./src:
	bwio.c  clock.c  debug.c  Makefile  math.c  string.c

	./task:
	gameplayer.c  gameserver.c  requests.c  shell.c  task.c

	Note: Extra compilation files may be included in the directories (.o, .s etc).

Question 5
==========
	Here is the output from our kernel 3 user tasks:

	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 1 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 2 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 1 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 3 
	Tid: 7 	 Delay Interval: 33 	 Num of Completed Delays: 1 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 4 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 2 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 5 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 6 
	Tid: 7 	 Delay Interval: 33 	 Num of Completed Delays: 2 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 3 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 7 
A->	Tid: 8 	 Delay Interval: 71 	 Num of Completed Delays: 1 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 8 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 9 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 4 
	Tid: 7 	 Delay Interval: 33 	 Num of Completed Delays: 3 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 10 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 11 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 5 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 12 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 13 
	Tid: 7 	 Delay Interval: 33 	 Num of Completed Delays: 4 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 6 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 14 
	Tid: 8 	 Delay Interval: 71 	 Num of Completed Delays: 2 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 15 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 16 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 7 
	Tid: 7 	 Delay Interval: 33 	 Num of Completed Delays: 5 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 17 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 18 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 8 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 19 
	Tid: 7 	 Delay Interval: 33 	 Num of Completed Delays: 6 
	Tid: 5 	 Delay Interval: 10 	 Num of Completed Delays: 20 
	Tid: 6 	 Delay Interval: 23 	 Num of Completed Delays: 9 
	Tid: 8 	 Delay Interval: 71 	 Num of Completed Delays: 3 
	Exiting normally.

	Let's explain the output until the line pointed at by A (added for the 
	purposes of this discussion) and assume that our time starts at 0.

	Within the first 20 ticks, task 5 is able to delay and wake up twice since
	it is delaying for only 10 ticks. After around 23 ticks, task 3 will be woken
	up. After the next 10 ticks, task 5 is able to wake up again and then task 7,
	delaying for 33 ticks, will wake up since our total number of ticks is around 
	30-ish. Now, task 6 will not be the next to wake up since 23+23 = 46 and task
	5 is able to delay and wake up once more in between then. After this, task 5
	can wake up twice until we reach a time around 66 ticks and task 7 can wake up.
	Since 23*3 = 69, task 6 will be the next task to wake up. At the 70 tick mark,
	task 5 will wake up for the 7th time. Finally, task 8, who has been delaying
	for 71 ticks, will be woken up and can output.

	Due to their priorities, when task 5 awakes, it will be the first client 
	task to run, task 6 is second, etc.

	This pattern continues until each task has delayed for the given amount of
	times and output its data. I am omitting the description since it is fairly 
	straightforward to follow. 

	At the end, we can see that task 5 delays 20 times, task 6 delays 9 times,
	task 7 delays 6 times, and task 8 delays 3 times. This corresponds to the 
	numbers given in the assignment.
