												becmacdo	Barbara Macdonald
												dgoc 		Daniel Goc
			________             ________           _____     ______ 
			___  __ \__________________(_)____________  /_    __|__ \
			__  /_/ /_  ___/  __ \____  /_  _ \  ___/  __/    ____/ /
			_  ____/_  /   / /_/ /___  / /  __/ /__ / /_      _  __/ 
			/_/     /_/    \____/___  /  \___/\___/ \__/      /____/ 
								/___/                               
____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||1 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

	The executable is located at: /u8/becmacdonald/cs452/p2/handin/main/main.elf.

	To make the kernel, execute the following from the root directory:
	cd src/
	make clean && make all && make copy
	cd ..
	make clean && make all
	cp main/main.elf /u/cs452/tftpboot/ARM/becmacdo_p2.elf

	To load the program, type 'load ARM/becmacdo_p2.elf' at the command prompt.

	Finally, to operate the program, type 'go' at the RedBoot command prompt.
 ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||2 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

	The following is a description of our train application.
	
	Model
	=====
	For this assignment, we simply use the reserved flag in each node to set it
	as reserved or not. Otherwise, oour abstraction of the track is identical 
	to the one for P1.

	Route Planner
	=============
	The Route Planner for P2 has a more robust reservation system. Other than
	that, it has remained mostly the same.
	
		Sensor Predictions
		==================
		Since our sensor predictions worked for P1, we have not modified them for P2.
		We've simply added some Node Predictions.
	
		Node Predictions
		================
		In addition to determining all of the next sensors we could possibly hit,
		we now build a list of node predictions. This list includes every node
		a train will pass until it reaches a sensor. These predictions include
		each node a train could pass, independent of switch state or train direction.

		Reservations
		============
		Given the last triggered sensor by a train, we are able to predict the next 
		path it will head along and reserve it. 
		
		Once a train asks for a new path and gives the Route Planner the last 
		triggered sensor, the list of predicted nodes is created. Then, we reserve 
		all of those nodes. If a train is facing backwards along the desired path,
		all of the nodes behind the train will also be reserved in case it does
		not reverse properly. 

		We also make sure to reserve the last triggered sensor so that a train
		sitting idle between 2 sensors will never allow another train to travel
		through it.

		If a node is reserved, the cost of the path to that node is INT_MAX. Hence,
		the shortest path from any node to any other will never include this node. 
		This is how we ensure that no two trains will have them crossing the same
		nodes at the same time. After a reservation is made, we recompute the 
		shortest distances, observing these reservations.

		The nodes stay reserved until the train hits another sensor and asks the 
		Route Planner to change the path. At this point, the previous reservation
		is cancelled and the new one is made. Therefore, nodes are only reserved 
		for 1 time step (where we define 1 time step to be the time for a train
		to move from 1 sensor to the next).

		Here is the pseudo-code for the reservation function in the Route Planner:
			Grab the reservation for this train using the id.
			Cancel the previous reservation:
				For each node in the reservation,
					Set the reserved flag to 0.
					Set the node index (in the reservation) to -1 (error val). 
				Set the number of reserved nodes (in the reservation) to 0.
			Make the new reservation:
				For each node in the predicted nodes list:
					Set the reserved flag to 1.
					Save the node index in the reservation.
				Add the last triggered sensor to the reservation and set the flag.
				Set the length of the reservation to the number of nodes.
			Recompute the distances given these new reservations.

		Reservation Struct
		==================
		The following is the data structure for the reservations:

		typedef struct {
			int len;		// Number of reserved nodes
			int idxs[8];	// Indicies of the reserved nodes
		} Reservation;

		There is 1 reservation stored for each train within the Route Planner.
		We index this reservation by the train id. At this point, our reservations
		have at most 8 nodes. We hope to reduce this number in the future to make 
		it more aggressive.

	Detective
	=========

	Track Server
	============

	Train
	=====
	
	UI / Shell
	==========

	Error Codes
	===========
	We created the following error codes for this assignment:
		TIMEOUT,				// A timeout has occurred
		DET_INVALID_REQ_TYPE,	// Invalid Track Detective request type
		INVALID_NODE_NAME,		// Invalid node name
		INVALID_NODE_IDX,		// Invalid node index
		RP_INVALID_REQ_TYPE,	// Invalid request type for the Route Planner
		INVALID_SENSOR_IDX,		// Invalid sensor index
		INVALID_TRAIN_SPEED,	// Invalid train speed (avg speed)
		INVALID_TRACK			// Invalid track identifier

	Whenever a server request is made, we always check for these error values
	in the reply. If there is an error, the user task should attempt to handle
	it.

	Neat Things
	===========
	We did some neat things for this assignment. Here's a brief discussion of
	some of them.

		Standard Deviation
		==================

 ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||3 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

	The source code is located in: /u8/becmacdonald/cs452/p2/handin.
	
	Here are the md5 hashes for each file:
 ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||4 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|
	
	Here are all of the files we are submitting:


	Note: Extra compilation files may be included in the directories (.o, .s etc).
