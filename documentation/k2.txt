												becmacdo	Barbara Macdonald
												dgoc 		Daniel Goc

oooo    oooo                                          oooo       .oooo.   
`888   .8P'                                           `888     .dP""Y88b  
 888  d8'     .ooooo.  oooo d8b ooo. .oo.    .ooooo.   888           ]8P' 
 88888[      d88' `88b `888""8P `888P"Y88b  d88' `88b  888         .d8P'  
 888`88b.    888ooo888  888      888   888  888ooo888  888       .dP'     
 888  `88b.  888    .o  888      888   888  888    .o  888     .oP     .o 
o888o  o888o `Y8bod8P' d888b    o888o o888o `Y8bod8P' o888o    8888888888 

Question 1
==========
	The executable is located at: /u8/becmacdonald/cs452/a2/handin/main/main.elf.

	To make the kernel, execute the following from the root directory:
	cd src/
	make clean && make all && make copy
	cd ..
	make clean && make all
	cp main/main.elf /u/cs452/tftpboot/ARM/becmacdo_a2.elf

	To load the program, type 'load ARM/becmacdo_a2.elf' at the command prompt.

	Finally, to operate the program, type 'go' at the RedBoot command prompt.

Question 2 
==========
	
	Context Switch
	==============
	We wrote our context switch handling code to accept 5 arguments for kernel
	1. Hence, it did not need to be modified for this assignment.

	TD
	==
	The task descriptor struct was modified to include a send queue. When a user
	task sends a message, it blocks itself and waits on the receiver's send queue.
	Since we are also trying to get gcc to compile in optmized mode, many members
	we made volatile. We are still in the process of getting optimized mode to
	work.
	The TIDs are handed out in such a way that we can figure out where exactly
	the TD is stored in constant time. This is achieved my making sure that
	TID mod NUM_TD (total number of task descriptors possible) gives us the
	index.
	Finally, we also added a union of structs (that points to the sp) to be able
	to get at any system call arguments by the system call and argument names.

	Message Passing
	===============
	We added message passing for kernel 2 and will describe the additional
	algorithms and data structures below. Professor Cowan gave general 
	message passing algorithms in class and the following algorithms are based
	on his notes.
	
	Send
	====
	Send() can be called by a user task to pass a message to another user task.
	Note the Send() does not have to be called before the receiving task calls
	Receive(). The code can handle the case where the receiving task calls 
	Receive() before the sending task calls Send().

	The pseudo-code for the Send() function is:

	1. Error check all arguments.
	2. Fetch the receiver task using the supplied task id. 		(in O(1) time)
	3. Set the sender state to RECEIVE_BLOCKED.
	4. If the receiver is SEND_BLOCKED,
	5.		Copy the message to the receiver's address space.
	6.		Set the sender's state to REPLY_BLOCKED.
	7.		Give the sender's id to the receiver.
	8.		Unblock the receiver by putting it on a ready queue.
	9. Otherwise,
	10.		Push the sending task onto the receiving task's send queue.
	11.		Wait for the receiver to call Receive().
	
	If any errors occur during the execution of Send(), they are caught and
	returned to the calling code. The overall execution time (ignoring the time
	the senders spends on the send queue) is O(1 + sizeof(message)).

	Receive
	=======
	Receive() can be called by a user task to receive a message from another user
	task. Note that Receive() does not need to be called after the other task
	has called Send(). The code can handle the case where Receive() is called
	first.

	The pseudo-code for the Receive() function is:

	1. Error check all arguments.
	2. Set the receiver's state to SEND_BLOCKED.
	3. Check if a task is waiting on the send queue.
	4. If so,
	5.		Ensure the sender is RECEIVE_BLOCKED.
	6.		Copy the message to the receiver's address space.
	7. 		Store the task id of the sender to be returned.
	8.		Set the sender's state to REPLY_BLOCKED.
	9. Otherwise, wait for the sender to call Send().

	If any errors occur during the execution of Receive(), they are caught and
	returned to the calling code.

	Reply
	=====
	Reply() will be called by the receiving task to unblock the sending task and 
	acknowledge it received the message. Note that Reply() should be called after
	a message has been passed since it reverts the message passing states and 
	unblocks tasks.
	
	The pseudo-code for the Reply() function is:
	
	1. Fetch the sender to reply to.
	2. Ensure the sender is REPLY_BLOCKED.
	3. Verify the memory addresses are valid.
	4. Copy the reply to the sender's address space.
	5. Set the state of the replier and sender to READY.
	6. Push the sender and replier on to the ready queues.

	If any errors occur during the execution of Reply(), they are caught and
	returned to the calling code.

	Name Server
	==========
	The name server is an array of {char name[], int tid} structs. There is
	nothing fancy about the array. To register a new name and tid, we traverse
	the array looking for an identical string. If one is found, the tid is 
	updated. Otherwise, the new entry is appended to the end of the array.

	To look up an item by name, the array is linearly traversed until a
	matching string is found OR the end of the elements has been reached.
	If a name is not in the array, the WhoIs() call does not block. Instead,
	it returns a NOT_FOUND error code and we let the calling user task handle
	the error.

	The pseudo-code for the Name Server run() function is:

	1. Initialize the Name Server
	2. FOREVER {
	3. 	Receive a request from another user task.
	4. 	Copy the request into this memory space.
	5.	switch ( request type ) {
	6.		case RegisterAs:
	7.			Store the {name, tid} in the Name Server entries array.
	8.		case WhoIs:
	9.			Retrieve the tid from the given task name.
	10.			If the task has never registered, return an error.
	11.			Otherwise, return the tid.
	12.		default:
	13.			Error since this Name Server cannot handle other requests.
	14.		}
	15.	Reply to the other user task appropriately.
	16.	}

	Game Server & Game Players
	==========================
	Since the assignment only asked for a description of the changes to the
	kernel, we will not include a description of the game server and players. The
	code is heavily documented and easy to read, if needed. Or, we will be happy
	to provide written details.

Question 3
==========
	All source code is located in: /u8/becmacdonald/cs452/a2/handin.

	Here are the md5 hashes for each file:

	167dac29ccba731688c00e9db670a553  ./include/error.h
	a2912b64ea963481ad3bb970af33dc9d  ./include/clock.h
	4cfe565bd55fba39fa5264c6f92447e2  ./include/syscalls.h
	9af226f127c1fd759530cd45236c37b8  ./include/ts7200.h
	1f636a0caf7a3b085550e06e9bf4f204  ./include/gameserver.h
	284f5809b261c65bf4298f5707c6890e  ./include/bwio.h
	650f0bc012f3c2008b22034f4a58b40f  ./include/switch.h
	99c93fa25c52f885c1eff7de7dee2e0a  ./include/task.h
	f12dba7c03ed2d309d83f0c603bdf00a  ./include/string.h
	c45bac4a8032a517f70f7021869883ce  ./include/nameserver.h
	7da1c1556c470cac1128f4a5efada763  ./include/td.h
	68b329da9893e34099c7d8ad5cb9c940  ./include/shell.h
	80dcd00887e6fdfff3adb7a933bd9da4  ./include/requests.h
	771f329cf4f3ca93b29582c44cba7803  ./include/globals.h
	f0210fab5c472fbd056c49576bcbe4d3  ./include/main.h
	ccf98888e8b4b6ad9b9cb429697942f4  ./include/gameplayer.h
	ca5c919f25c3d59e4b1e67cc78f4ab87  ./include/debug.h

	0f78235c08871287135805a9692a14c6  ./lib/libbwio.a
	1fea4e7dfe68e46b30ad1b9fcb4eed8a  ./lib/libclock.a
	30282915ec244ba9af30e9fe2c10e11b  ./lib/libdebug.a
	07efed34bd3bc756a8b7348c3b336981  ./lib/libstring.a

	f0f36ad4b9054cb247637848c8857730  ./main/main.s
	69b1217e2d6e72c4fc75c7cedd3c8109  ./main/main.c
	d538370b31b3c6232b3fcaf95b6b961b  ./main/td.c
	99d728f8cdd65178b8168a14092caf90  ./main/shell.c
	5ef12d7238e4be4ffe0bfcd1d4419e63  ./main/orex.ld
	161e817b0dff6c9bfb3654293fd227a4  ./main/main.o
	3f856db9aaf0c9437ec858f97bcee3ad  ./main/td.s
	d08763a916ac39987080623d7806356f  ./main/td.o
	594987619c22ab91d187ad1079a4fdd7  ./main/main.map
	f52379deafadf54665f6e8225e40a6f7  ./main/main.elf
	e21ee3ced24a77215296a037e0e7f8f4  ./Makefile

	8c71bec7b7b28cf2737f83116104e0fa  ./server/nameserver.s
	3ebb49bddb9f0752525a2d563156d8d4  ./server/nameserver.c
	caa007e4d1d571dcf65b22755525fdec  ./server/nameserver.o

	1b213133ff8934bc0c152aad0d8a85e5  ./src/bwio.c
	408c442d786f9436b969b27b5d934cd7  ./src/debug.c
	97a527897e5be8082b52809db93aa68e  ./src/string.c
	0657d557d9e2d20edac945dcef632bd5  ./src/clock.c
	fc7af4fc8862bb54d191671f88f22fb3  ./src/Makefile
	0f78235c08871287135805a9692a14c6  ./src/bwio.a
	30282915ec244ba9af30e9fe2c10e11b  ./src/debug.a
	07efed34bd3bc756a8b7348c3b336981  ./src/string.a
	1fea4e7dfe68e46b30ad1b9fcb4eed8a  ./src/clock.a

	152b748c8d12782477e19eddcb54f6fc  ./syscall/syscalls.s
	2eb82a2f54070f80de91bf1c67b5998f  ./syscall/syscalls.c
	e0f257c14c2f955b193861afcee14079  ./syscall/syscalls.o

	1910b877d5bf1f4912f6e7a1798023c3  ./task/requests.s
	2a680012f3698e3f29e0571a0926a49e  ./task/gameserver.c
	6fdbce2bdc21ddacb995616ac1bd5aee  ./task/task.c
	67176ab15a6023cb97879874dcb0c3b3  ./task/gameplayer.c
	b2b843d12bb0eea59d331db06f02bc9e  ./task/requests.c
	25dc84f3078f9b54e5dd583c013baa01  ./task/requests.o
	adc05dce7505bc7ab37e4edfbf18bde5  ./task/task.s
	b5a038a0e40af612be3541c7254e8b26  ./task/task.o
	7150c2eb066735c719ded1e3cbe296d6  ./task/gameserver.s
	f39172796aca884d2be541bb9a9e8bb5  ./task/gameserver.o
	1eab361cca01dd61ebb10cf47cefda9d  ./task/gameplayer.s
	8b96b1f0ce806dc4d4ad92c659d57a04  ./task/gameplayer.o

Question 4
==========
	Here is a listing of all submitted files:
	Makefile

	arch:
	switch.S

	documentation:
	k2.txt

	include:
	bwio.h   gameplayer.h  main.h        shell.h   syscalls.h  ts7200.h
	debug.h  gameserver.h  nameserver.h  string.h  task.h	   clock.h
	error.h  globals.h     requests.h    switch.h  td.h

	lib:
	libbwio.a  libdebug.a  libstring.a	libclock.a

	main:
	main.c  orex.ld  td.c

	server:
	nameserver.c

	src:
	bwio.c  debug.c  Makefile  string.c	clock.c

	syscall:
	syscalls.c

	task:
	gameplayer.c  gameserver.c  requests.c  task.c

	Note: Extra compilation files may be included in the directories (.o, .s etc).

Question 5
==========
	Here is a description of priorities for all user tasks in Kernel 2.

	The first user task that creates the Name Server, Game Server, and Game 
	Players has the highest priority (0). This is because this task sets up all of
	the other user tasks. We want to ensure everything is set up before the 
	Name Server is queried or the games start.

	The Name Server is created at the second highest priority (1) because we do
	not want a user task to become blocked waiting for the Name Server to respond
	to a query.

	For the same reason as above, the Game Server is also created at the second
	highest priority (1).

	All player tasks are created at priorities equal to or lower than 1
	(ie. 2 -> 9). We've increased the number of priorities for this assignment
	so that we can better test it. 

	4 players are created at priority 2 to ensure that the correct players play
	against each other at the same priority.

	2 players are created at priority 1 to verify that we can have players
	at the same priority as the servers.

	1 player is created at priority 3 and 1 at priority 4 to ensure that players
	with different priorities can still play an entire match together.

	Finally, we create 50 players at varying priorities above 5. These players
	will all run once the first 8 have finished. These players test the system to
	ensure that a high number of players can play together at different priorities.

Question 6 
==========

	Note: The output will pause after the Game Server has handled 1 request from a
	player. To continue the play, press any key. Sometimes the server will not 
	output anything between calls to Receive(), so a key may have to be pressed
	at most twice to get new output.

	Here is the output of the user tasks for Kernel 2:

	load ARM/becmacdo_a2.elf
	Using default protocol (TFTP)
	Entry point: 0x00218238, address range: 0x00218000-0x0021c934
	RedBoot> go
	Initialized serial port connection.
	Initialized interrupt handler at addr 21838c. 
	Player: Edward S. (7): Signing up for a game.
	Player: EvilClone8 (8): Signing up for a game.
	Player: Edward S. (7): Playing S.
	Player: EvilClone8 (8): Playing P.
	Player: EvilClone8 (8): Lost to Edward S. (7) :(.
	Player: EvilClone8 (8): Playing R.
	Player: Edward S. (7): Won against EvilClone8 (8)!
	Player: Edward S. (7): Playing S.
	Player: Edward S. (7): Lost to EvilClone8 (8) :(.
	Player: Edward S. (7): Playing S.
	Player: EvilClone8 (8): Won against Edward S. (7)!
	Player: EvilClone8 (8): Playing R.
	Player: EvilClone8 (8): Won against Edward S. (7)!
	Player: EvilClone8 (8): Quitting.
	Player: Edward S. (7): Lost to EvilClone8 (8) :(.
	Player: Edward S. (7): Quitting.
	Player: EvilClone8 (8): Quit.
	Player: Edward S. (7): Quit.
	Player: Dwayne J. (3): Signing up for a game.
	Player: Paper Mario (5): Signing up for a game.
	Player: EvilClone4 (4): Signing up for a game.
	Player: Dwayne J. (3): Playing R.
	Player: Paper Mario (5): Playing P.
	Player: EvilClone6 (6): Signing up for a game.
	Player: Paper Mario (5): Won against Dwayne J. (3)!
	Player: Paper Mario (5): Playing P.
	Player: Dwayne J. (3): Lost to Paper Mario (5) :(.
	Player: Dwayne J. (3): Playing R.
	Player: EvilClone4 (4): Playing P.
	Player: EvilClone6 (6): Playing P.
	Player: Dwayne J. (3): Lost to Paper Mario (5) :(.
	Player: Dwayne J. (3): Playing R.
	Player: Paper Mario (5): Won against Dwayne J. (3)!
	Player: Paper Mario (5): Playing P.
	Player: EvilClone6 (6): Tied with EvilClone4 (4).
	Player: EvilClone6 (6): Playing S.
	Player: EvilClone4 (4): Tied with EvilClone6 (6).
	Player: EvilClone4 (4): Playing S.
	Player: Paper Mario (5): Won against Dwayne J. (3)!
	Player: Paper Mario (5): Quitting.
	Player: Dwayne J. (3): Lost to Paper Mario (5) :(.
	Player: Dwayne J. (3): Quitting.
	Player: EvilClone4 (4): Tied with EvilClone6 (6).
	Player: EvilClone4 (4): Playing R.
	Player: EvilClone6 (6): Tied with EvilClone4 (4).
	Player: EvilClone6 (6): Playing R.
	Player: Paper Mario (5): Quit.
	Player: Dwayne J. (3): Quit.
	Player: EvilClone6 (6): Tied with EvilClone4 (4).
	Player: EvilClone6 (6): Quitting.
	Player: EvilClone4 (4): Tied with EvilClone6 (6).
	Player: EvilClone4 (4): Quitting.
	Player: EvilClone6 (6): Quit.
	Player: EvilClone4 (4): Quit.
	Player: EvilClone9 (9): Signing up for a game.
	Player: EvilClone10 (10): Signing up for a game.
	Player: EvilClone9 (9): Playing P.
	Player: EvilClone10 (10): Playing P.
	Player: EvilClone9 (9): Tied with EvilClone10 (10).
	Player: EvilClone9 (9): Playing S.
	Player: EvilClone10 (10): Tied with EvilClone9 (9).
	Player: EvilClone10 (10): Playing S.
	Player: EvilClone9 (9): Tied with EvilClone10 (10).
	Player: EvilClone9 (9): Playing R.
	Player: EvilClone10 (10): Tied with EvilClone9 (9).
	Player: EvilClone10 (10): Playing R.
	Player: EvilClone9 (9): Tied with EvilClone10 (10).
	Player: EvilClone9 (9): Quitting.
	Player: EvilClone9 (9): Quit.
	Player: EvilClone10 (10): Tied with EvilClone9 (9).
	Player: EvilClone10 (10): Quitting.
	Player: EvilClone10 (10): Quit.
	Player: RobinHood11 (11): Signing up for a game.
	Player: EvilClone12 (12): Signing up for a game.
	
	... "Signing up" output condensed ...
	
	Player: EvilClone59 (59): Signing up for a game.
	Player: RobinHood60 (60): Signing up for a game.
	Player: RobinHood11 (11): Playing S.
	Player: EvilClone12 (12): Playing P.
	
	... "Playing" output condensed ...

	Player: EvilClone59 (59): Playing P.
	Player: RobinHood60 (60): Playing S.
	Player: EvilClone12 (12): Lost to RobinHood11 (11) :(.
	Player: EvilClone12 (12): Playing R.
	Player: RobinHood11 (11): Won against EvilClone12 (12)!
	Player: RobinHood11 (11): Playing R.

	... "Playing and outcome" output condensed ...
	
	Player: RobinHood60 (60): Tied with EvilClone59 (59).
	Player: RobinHood60 (60): Playing P.
	Player: EvilClone12 (12): Tied with RobinHood11 (11).
	Player: EvilClone12 (12): Quitting.
	Player: RobinHood11 (11): Tied with EvilClone12 (12).
	Player: RobinHood11 (11): Quitting.

	... "Outcome and quitting" output condensed ...
	
	Player: RobinHood60 (60): Tied with EvilClone59 (59).
	Player: RobinHood60 (60): Quitting.
	Player: EvilClone59 (59): Tied with RobinHood60 (60).
	Player: EvilClone59 (59): Quitting.
	Player: EvilClone12 (12): Quit.
	Player: RobinHood11 (11): Quit.
	
	... "Quitting" output condensed ...
	
	Player: RobinHood60 (60): Quit.
	Player: EvilClone59 (59): Quit.
	Exiting normally.

	Program completed with status 0
	RedBoot> 

	Here is a description of why this output is correct:
	
	Player Moves
	============
	Our game has 3 player types: stubborn, clone, and round robin players.
	Dwayne J. always plays Rock, Edward S. always plays Scissors, and Paper
	Mario always plays Paper. The EvilClones look at the previous match and
	play the move that would win if their opponent plays the same move as in the
	previous match. Therefore, the EvilClones will always win against these 3
	players after the first match. RobinHood players start by playing Scissors
	and play Rock and Paper in that order and keeps cycling.
	
	Output Explanation
	==================
	In the beginning, the first 4 players play in round robin order. The first
	task makes their move, the second task makes their move, then the third,
	and finally the fourth are scheduled since they are all at the same priority.
	Hence, the output cycles between each of the first four players. They will 
	each make their moves, the server determines the winner and losers, and the
	results are output. Each player plays three times. Due to the logic above,
	the stubborn players might win during the first round, but will 
	lose for all of the rest since they are each playing against a clone.

	The second round is a sanity test that players can be at the same priority
	as the name and game servers. The scissors player will win the first match and
	the clone will win for the remaining 2 matches.

	After this, the next 2 players will be scheduled. They are both clone players 
	and both start by playing scissors. Then, they will switch and each play rock.
	Then, they will both play paper. Thus, both players will tie for every match
	until they exit.

	Finally, the last 50 players are scheduled to run. This is mostly a stress test.

	A player first announces that it is signing up for a game. Once the game server
	matches up two players, they may begin playing. A player makes a choice
	then annouces the choice and proceeds to inform the game server.
	Once both choices are in the players are responded with the outcome.
	This goes on until either player decides to quit. Again, the player first 
	announces it is going to do so, and then informs the game server.
	The game server marks the match as finshed and immediately responds.
	Then the player announces that it has quit and calles Exit().

	A particularly interesting test is the EvilClone9 vs. EvilClone10 match as these
	players have differing priorities. EvilClone9 having the higher priority allways
	gets to run before its opponent, but has to wait for its opponent to make a move.
	Once it has finished however, it proceeds to quit before EvilClone10 is even
	informed the match has ended. In all these tests we can see that players wait 
	around untill they get a reply back from their server and both 
	'Send > Receive > Reply' and 'Receive > Send > Reply' paths of execution get
	us the desired result.

	The next 25 matches are more-or-less of a stress test for the memory accessing
	part of the primitives, as well as stress test for Task descriptors and their
	queues. Their output is not particularly interesting as long as no failures are
	detected.

