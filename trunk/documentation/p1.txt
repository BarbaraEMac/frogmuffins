												becmacdo	Barbara Macdonald
												dgoc 		Daniel Goc
		________             ________           _____     ______
		___  __ \__________________(_)____________  /_    __<  /
		__  /_/ /_  ___/  __ \____  /_  _ \  ___/  __/    __  / 
		_  ____/_  /   / /_/ /___  / /  __/ /__ / /_      _  /  
		/_/     /_/    \____/___  /  \___/\___/ \__/      /_/   
		                     /___/                              
 ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||1 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

	The executable is located at: /u8/becmacdonald/cs452/p1/handin/main/main.elf.

	To make the kernel, execute the following from the root directory:
	cd src/
	make clean && make all && make copy
	cd ..
	make clean && make all
	cp main/main.elf /u/cs452/tftpboot/ARM/becmacdo_p1.elf

	To load the program, type 'load ARM/becmacdo_p1.elf' at the command prompt.

	Finally, to operate the program, type 'go' at the RedBoot command prompt.
 ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||2 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

	The following is a description of our train application.
	
	Model
	=====
	We decided to use the model provided on the course webpage to store the track
	graph. We did this because the track data was already measured and stored in
	a useable format. 

		Model Data Structure
		====================
		Here are the structs we use to store the model:

		typedef enum {
			SWITCH_STRAIGHT = 0,
			SWITCH_CURVED = 1
		} SwitchDir;

		typedef struct {
			int dest;
			int distance;
		} Edge;

		typedef struct {
			Edge 		ahead[2]; // (curved, straight)
			Edge 		behind;
			SwitchDir set;
		} Switch;

		typedef struct {
			Edge ahead;
			Edge behind;
			Edge filler[1];
			char trig_forward, trig_back;
		} Sensor;

		typedef struct {
			Edge ahead;
			Edge filler[2];
		} Stop;

		typedef struct {
			enum {
				NODE_SWITCH = 3,
				NODE_SENSOR = 2,
				NODE_STOP = 1,
			} type;
			char name[NODE_NAME_LEN];
			int id, idx;
			union {
				Switch sw;
				Sensor se;
				Stop st;
				Edge edges[3];
			};
			int reserved;
			int x, y; // location (for ui)
		} Node;

		typedef struct {
			int 	num_nodes;
			Node 	nodes[MAX_NUM_NODES];
			int 	sensor_nodes[NUM_SENSORS];
		} TrackModel;

		This is essentially taken from the course webpage with a few minor adjustments:
			1. The names were changed to use camel case.
			2. Each Node now stores its index in the TrackModel's nodes array.
			3. Each node has a reserved flag. If the flag is 1, this node is reserved.
			4. The x and y co-ordinates for the UI have been altered.

		Parse & Ownership
		=================
		The model data is hardcoded into the model.c file as a string. This string
		can be parsed with sscanf to build the model data structure at any time.
		Since the model is quite large and memory intensive, we've decided to only
		let the Track Server and Route Planner parse and store the model.

		We decided against parsing the model once and passing it as a message
		to each task since the model is large. We will pay the parse time cost
		during initialization.

		Therefore, only the Route Planner and Track Server use and own the model.

		Once we have a track reservation system implemented, these two use tasks will
		need to share data about the model.

		Data Accuracy
		=============
		We are accepting the data in the track files as being accurate. Chery confirmed
		that she measured some of the distances in the previous term.

	Route Planner
	=============
	A train will query the route planner to determine its route. It is able to
	determine the shortest path between any two nodes, distance between any two
	nodes, make predictions about the next sensors along a path, determine which
	switches will need to be set and to which directions, determine if a train
	needs to turn around / reverse, and more.

		Route Planner Data Structure
		============================
		The Route Planner is a private struct of the following form:
			int 			 distances[num_nodes][num_nodes];
			int 			 paths    [num_nodes][num_nodes];
			TrackModel		*model;
			Reservations	*reservations;

		It stores the minimum distance between any two nodes, the shortest path between
		any two nodes, a model of the track, and the track reservations.

		The track reservations are not currently used. (See comment below)
		
		Shortest Path Algorithm
		=======================
		To be able to determine the shortest distance between any two nodes in 
		O(1) time, we run Floyd-Warshall's All-Pairs Shortest Path algorithm
		once during initialization and store the results. Here is the algorithm:

		Let dists be the distances matirx.
		Let paths be the path parents matrix.

		Initialize matrices:
			dists[i][j] = 0 		if i == j
						  cost(i,j) if i and j are neighbours
						  Infinity  otherwise
			path[i][j] = -1

		for ( k = 0; k < n; k ++ ) {
			for ( i = 0; i < n; i ++ ) {
				for ( j = 0; j < n; j ++ ) {
					if (dists[i][j] > dists[i][k] + dists[k][j]) {
						dists[i][j] = dists[i][k] + dists[k][j];

						paths[i][j] = k;
					}
				}
			}
		}

		This algorithm computes the shortest distance between any two nodes in
		the graph and stores them in a distances matrix. It runs in time O(n^3).

		The cost function returns the distance in mm between two consecutive,
		neighbouring nodes. Thus, our algorithm will find the shortest distance in mm
		between any two nodes. Note that if a train needs to reverse along this path, 
		it may take longer to reach the destination than if the train had taken a longer
		route (distance-wise) that required it to only drive straight. We decided 
		that we are fine with using the shortest distance to determine the shortest
		path for now.

		The shortest path from node i to node j  can be recovered in the following
		manner:

		outputPath( path, i, j ) {
			if ( path[i][j] == -1 ) {
				Display node i.
			}
			else {
				outputPath(path, i, path[i][j]);
				outputPath(path, path[i][j], j);
			}
		}

		The function uses recursion to follow the links stored during Floyd-Warshall
		to determine the path. The depth of the recursion is at most O(length of path).

		Why Do We Use Floyd-Warshall?
		=============================
		Floyd-Warshall allows us to cache our shortest paths results. We only run this
		algorithm once and can compute distances and paths from those stored results
		very quickly. We choose to pay a larger cost up front to save time when the 
		trains are running.

		Even with the reservation system, having the shortest path between any two nodes
		will collapse the graph for any sections that are not reserved, speeding up
		a Dijkstra or any other algorithm we might use to compute the paths using the
		reservation system.

		Route Planner to Train API
		==========================
		Currently, only the command prompt (shell) and rain talk to the Route Planner.
		Since the shell is specialized for testing, we've created special handlers
		for shell messages.

		When the train talks to the Route Planner, it communicates using sensor ids.
		Each sensor has a unique id within the sensor_nodes array of the model. We
		can use this id to determine the location of the train and direction it is
		going.

		When the Route Planner talks to the train, it sends sensor ids as predictions,
		distances in mm to particular landmarks, and switch settings/directions. 

		The train does not know anything about the model. We felt that the train
		should not need to know about nodes or need to parse the model for it to
		drive. We consider our train to be driven by either a blind engineer or one
		without a map. The Route Planner simply tells the train a distance to travel,
		direction, and switch settings. Thus, the train can focus on calibration
		instead of complex details about nodes and making sure it is travelling along
		a set path.

		Shortest Distance
		=================
		To get the shortest distance between any two nodes, we simply look up the
		corresponding entry in the distances matrix and return it to the train.

		Shortest Path
		=============
		To computer the shortest distance between any two nodes, we recurse on the
		path to build a list of landmarks. The list and length of the list are
		returned.

		Turn Around
		===========
		Since sensors give a direction and the train tells the Route Planner when 
		it triggers a sensor, we can easily tell if the train needs to reverse.

		Switch Settings
		===============
		Given a desired path and the last hit sensor, it is easy to determine the next 
		few switches a train will encounter and the direction they need to be set.
		When the Route Planner tells the train it has a valid path, it also returns
		some switch settings.
		
		SwitchSettings is a struct of the following form:
			int distanceToSwitch;
			int switchId;
			SwitchDirection dir;

		The train will receive a list of these settings and can flip switches 
		immediately before it needs to. Thus, when more trains are on the track, they
		will not interfere when switching switches.

		Right now, the train will flip switches that are not near it. This will change
		as we have more trains running on the track.
		
		Predictions
		===========
		Given a desired path and the last hit sensor, the Route Planner is able to 
		predict which sensors the train should hit next.

		If the train is facing forward, we follow the path in the desired direction
		and build a list of the first sensors it could hit. If the path reaches a switch,
		we follow in both directions in case the switch is not set correctly.

		If the train is facing backward, we tack on a list of all sensors it is facing
		in case it does not turn around correctly. This way we make a prediction for ANY
		route the train could take. If a sensor is hit and it is not a member of this list,
		we disregard the trigger since it is not possible for this train to have triggered 
		it.

		These predictions are given to the train. The train bundles the sensors and an 
		estimated trigger time range to send to the Detective. The Detective handles the
		trigger from there.

		Reservations
		===========
		For project 2, we will be implementing a full reservation system so that 
		multiple trains ca run on the track simultaneously. This system has not yet
		been fully implemented.

		Thus, the single train does not reserve any part of the tracks for this
		project.
	
	Detective
	=========
	The detective handles polling and allows trains to wait for a set of sensors to
	trigger. There is a expire time associated with each such request and if the request 
	expires, the train is notified and expected to recover.

		Notifiers
		=========
		The detective spawns two helper tasks - a polling task that tries to poll the 
		train box as often as possible, and a watchdog that makes sure the poller does not
		time out. Having an extra task for the watchdog allows our project to be really
		robust, even against such events as temporarily severing the train box connection.
		
		Any time the polling task returns its data (more than 1 sensor can be returned)
		we go through it and match against any outstanding requests. The poller notifier was
		originally a part of the track server, but to improve latency, we decided it should
		report directly to the detective.

		After getting a watchdog notify, we check for requests that have expired and reply 
		to them.

		WATCH_FOR
		=========
		This is the most useful request (from the train's POV) of the detective. It allows 
		the train to only wait on a specific set of sensor triggers, disregarding erroneous
		sensor data. Provided the train can predict the potential trigger windows accurately
		one would have to hit the right sensors within a fraction of a second to confuse 
		the train.

		GET_STRAY
		=========
		In the event WATCH_FOR fails, the trains can resort to GET_STRAY. 
		This request will return the next (unmatched by WATCH_FOR) event. This way the train
		the train will disregard sensors triggered by other trains, for later assignments.


		The detective also keeps a buffer of unaccounted for sensor triggers, but they are
		not used at this time.
	
	Track Server
	============
	The track server is largely unchanged from the K4 code, with the exception of the
	polling task now talking directly to the detective, and the detective passing on the
	values to the track server itself.
	We also added extra error checking, and printing through the UI task.

	Train
	=====

		The train only uses one speed at this time (plus 0 & 15 the stopping & reversing
		speeds). This could be extended for future projects, but given the time constraint
		of 168 hours per week we did not feel like it was important to implement this
		feature at this time. 

		Speed Calibration
		=================
		The train keeps a buffer of the last 20 track section speeds and calculates the
		mean and standard deviation of this sample. Data is only added to the buffer
		when we know the train is not accelerating (and decellerating). This gives us a
		base speed to use in our calculations for current speed.
		This approach is robust against the train losing speed over time and does not 
		require hardcoded speed profiles per train. It also has the advantage of not having
		to figure these out ahead of time as this time-costly, at the expense of little extra
		calibration time at each run.

		Stopping Distances
		==================
		As of know, after calibrating the speed, thr train stops the next time it goes past
		E11. This is convenient as there are markings on the track that allows us to easily gage
		what the stopping distance is and input it into the train's prompt.
		The stopping distance is fairly reproducible, and so it is used for the duration of the
		run.

		Locating the train
		==================
		Whenever the train loses its position, it calls the locate subroutine. 
		Using a slow speed setting, that is unlikely to damage the train we do the following:

			timeout = 1 sec
			FOREVER {
				sensor = get_stray_sensor( timeout )
				
			  if( isValid( sensor ) ) break;
				train_reverse;
				timeout *= 2;
			}

		Since the timeout doubles every time, this is guaranteed to return the train location
		eventually assuming the train is actually moving.

		This subroutine is called at the beginning of train init to locate the train, 
		any time the usual sensor prediction goes horribly awry.

		Keeping train location
		======================
		The route planner provides us with a list of senors the train could possibly hit
		if it continues travelling forwards (or backward) and their respective distances from
		the last sensor hit. This is combined with the time the last sensor hit and the current
		speed estimate to predict when the sensors are going to be triggered, and ask
		the detective the notify is if/when they do. If this fails the train will look for the
		next stray sensor, eventually resorting to the locate routine.

		Watchman
		========
		The watchman is a safekeeping task that makes sure the train does not crash,
		using the stop distance as given by the Route Planner and passed by the train.
		It also updates the train's predicted position in the UI, using the last known speed
		and sensor passed in by the train, and the time elapsed since the the sensor was 
		triggered.

		The watchman has a heart - a helper tasks that send back to it at predetermined
		interval. 

		'But, who watches the watchman?' you ask; nobody, the watchman and train is perfect 
		metaphor for the accountability of unquestioned authority in the world. Now you know. 
	
	UI / Shell
	==========
	We have designed a unique user interface for this project. This UI shows the
	state of the turn-outs, last 4 triggered sensors, location of the train 
	(distance in mm from last sensor it hit), current time in ms, and the shell
	prompt. Much of this information is overlayed on a map of the track. There 
	are unique maps depending on the track that is loaded.

		UI Implementation
		=================
		The UI is a server. User tasks that wish to display information send 
		this info to the UI server. All output formatting is contained within the
		UI server. Here is the pseudo-code:

		Initialize:
			Get the track id from the shell.
			Parse the corresponding model.
			Clear the screen.
			Draw the map and other static information.
			Create the timer notifier.
			Register with the Name Server.
			Reply to the shell to let other tasks run.

		FOREVER {
			Receive from a user task.
			Reply to the user task immediately.

			switch( request type ) {
				case CLOCK:
					Display the current time.
				case TRACK_SERVER:
					Update a switch setting on the map.
				case DETECTIVE:
					Update the last triggered sensors.
				case TRAIN:
					Update the train's current location.
			}
		}

		The UI task is kept as simple as possible. It has quite a few functions
		that can send special escaped character sequences to the terminal.

		Layout
		======
		The track map prints at the top of the screen. The switch settings are
		displayed over the map. 'S' indicates the switch is straight and 'C' 
		indicates the switch is curved. The train location is displayed inside
		the left-most loop and the current time (in ms) is displayed in the
		right-most loop.

		The last triggered sensors, triggered by a train or a malicious TA, will
		display below the map. We will show the last 4 triggered sensors. 

		The shell prompt will display at the very bottom and can show 3 lines
		worth of scrolling data.

		We realize that the map is very large and will be modifying it in future
		iterations of this project.

		Shell
		=====
		The shell does not print itself via the UI server for the following
		reasons:
			1. We've been using the shell since A0 so we know it works. The UI
			   is new code which may have bugs. Hence, the shell is more robust
			   and we can count on it to display properly.
			2. We need to be able to scroll to see error and debug data. The 
			   shell does this for free.
			3. We need to use the shell before the UI starts.

		The Shell is the only user task that will display text itself, other
		than the UI in our production code.

		Efficiency
		==========
		There are many calls to cprintf within the UI server. These calls could 
		be merged together to create more efficient output. This will be 
		strongly considered for future projects.

		Advantages
		==========
		All of the formatting is stored within one simply user task. If we need to 
		change how a particular gadget is displayed, this will be very simple.

		Limitations
		===========
		Each element that is drawn to the screen needs to be sent via a message to
		the UI. This can be very costly time-wise.

	Error Codes
	===========
	We created the following error codes for this assignment:
		TIMEOUT,				// A timeout has occurred
		DET_INVALID_REQ_TYPE,	// Invalid Track Detective request type
		INVALID_NODE_NAME,		// Invalid node name
		INVALID_NODE_IDX,		// Invalid node index
		RP_INVALID_REQ_TYPE,	// Invalid request type for the Route Planner
		INVALID_SENSOR_IDX,		// Invalid sensor index
		INVALID_TRAIN_SPEED,	// Invalid train speed (avg speed)
		INVALID_TRACK			// Invalid track identifier

	Whenever a server request is made, we always check for these error values
	in the reply. If there is an error, the user task should attempt to handle
	it.

	Neat Things
	===========
	We did some neat things for this assignment. Here's a brief discussion of
	some of them.

		Optimization
		============
		We were the first group to figure out how to compile in optimized mode.
		Virtually all our code is compiled with 02 optimizations on, there is one
		little file with two tiny functions that never get called that is not 
		optimized to fool the compiler into loading function pointer properly.
		Inside the kernel, the volatile modifier is carefully used to ensure memory
		reads/writes do not get optimized away in places that they do not need to.
		Furthermore, our context switch assumes the number of registers saved by 
		the request call primitives. This has changed with the optimization on, 
		and the appropriate number had to be updated.

		The code speed increased by 2 - 3 times with O2 optimization on.
	
		We do not particularly feel like debugging gcc optimization bugs at this time
		and so we chose to use the stable O2 optimization instead of O3.

		Task Priorities
		===============
		We have designed a task priority hierarchy for this assignment. It works
		as follows:

		#define NUM_USER_PRIORITIES	10
		#define HW_SERVER_PRTY 		1
		#define NOTIFIER_PRTY 		HW_SERVER_PRTY - 1
		#define OTH_SERVER_PRTY		3
		#define OTH_NOTIFIER_PRTY	OTH_SERVER_PRTY - 1
		#define	IDLE_PRTY			NUM_USER_PRIORITIES - 1
		#define SHELL_PRTY			IDLE_PRTY - 1

		#define TRAIN_PRTY			5
		#define LOW_SERVER_PRTY		7

		We have 10 different priorities, ranging from 0 to 9, and they are
		assigned as follows:

		0 is used for hardware notifiers since we need to handle hardware interrupts
		as soon as they occur.
		1 is used for hardware servers.
		3 is used for other servers ( UI and track server ).
		2 is used for the notifiers of "other servers".
		5 is used for train tasks.
		7 is used for the only low priority server, the Route Planner.
		8 is used for the shell.
		9 is used for the idle task.

		Notifiers must always have a higher priority than the servers they are
		notifying.
 ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||3 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

	The source code is located in: /u8/becmacdonald/cs452/p1/handin.

	Here are the md5 hashes for each file:
 ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
||Q |||u |||e |||s |||t |||i |||o |||n |||       |||4 ||
||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|
	
	Here are all of the files we are submitting:

	.:
	Makefile       include        task           
	arch           lib            server        
	documentation  main           src            train

	./arch:
	blank.c     drivers.c   ep93xx.c    requests.c  switch.S    switch.c

	./documentation:
	k1.txt       k2.txt       k4.txt       syscall.txt
	k2.out       k3.txt       p1.txt

	./include:
	buffer.h        fifo.h          model.h         string.h        trackserver.h
	bwio.h          gameplayer.h    requests.h      switch.h        train.h
	debug.h         gameserver.h    routeplanner.h  syscalls.h      ts7200.h
	drivers.h       globals.h       servers.h       task.h          ui.h
	error.h         math.h          shell.h         td.h

	./lib:
	libbuffer.a  libbwio.a    libdebug.a   libmath.a    libstring.a

	./main:
	main.c      orex.ld     syscalls.c  td.c

	./server:
	clockserver.c  nameserver.c   serialio.c

	./src:
	Makefile  buffer.c  bwio.c    debug.c   fifo.c    math.c    string.c

	./task:
	gameplayer.c  gameserver.c  shell.c       task.c

	./train:
	detective.c     routeplanner.c  train.c
	model.c         trackserver.c   ui.c

	Note: Extra compilation files may be included in the directories (.o, .s etc).
